<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value>short</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Convergence tests for exploring successive substitution solvers for the compressive notch test</string_value>
  </description>
  <simulations>
    <simulation name="dp_test">
      <input_file>
        <string_value lines="1" type="filename">compression.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="eta_1">
          <values>
            <string_value lines="1">1.e21</string_value>
          </values>
        </parameter>
        <parameter name="eta_2">
          <values>
            <string_value lines="1">1.e24</string_value>
          </values>
        </parameter>
        <parameter name="notch">
          <values>
            <string_value lines="1">round_refine</string_value>
            <comment>mesh style for notch,  currently square, round or round_refine (chooses different precomputed meshes)</comment>
          </values>
        </parameter>
        <parameter name="plasticity_model">
          <values>
            <string_value lines="1">von_mises</string_value>
            <comment>available isoviscous, von_mises, drucker_prager, depth_dependent_von_mises</comment>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
from math import pi, cos, sin

# initialize scaling parameters
h = 30000.  # system height in m
eta_0 = 1.e22   # reference viscosity (Pa s)
u0 = 2.5e-3       # compression velocity m/yr
rho = 2700.       # density
g = 9.81		  # gravity
yr_per_s = 1./3600./365.25/24.

edot_0 = u0*yr_per_s/h  # reference strain_rate
tau_0 = 2.*eta_0*edot_0  # reference stress

# dimensionless parameters
L2_on_h2 = eta_0*edot_0/rho/g/h

if (plasticity_model == 'von_mises'):
	C = 1.e8
	A = C/eta_0/edot_0
	B = 0.
	alpha = 0. 
	print 'using von Mises plasticity A={0}, B={1}, alpha={2}'.format(A,B,alpha)
elif (plasticity_model == 'drucker_prager'):
	phi = 30.*pi/180.
	C = 1.e8
	A = C*cos(phi)/eta_0/edot_0
	B = sin(phi)
	alpha = 1.
	print 'using drucker_prager plasticity A={0}, B={1}, alpha={2}'.format(A,B,alpha)
elif (plasticity_model == 'isoviscous'):
	A = 1.e10
	B = 1.e10
	alpha  = 0.
	print 'using isoviscous plasticity model A={0}, B={1}, alpha={2}'.format(A,B,alpha)
elif (plasticity_model == 'depth_dependent_von_mises'):
	phi = 30.*pi/180.
	C = 1.e8
	A = C*cos(phi)/eta_0/edot_0
	B = sin(phi)
	alpha = 0.
	print 'using depth dependent von Mises plasticity A={0}, B={1}, alpha={2}'.format(A,B,alpha)
else:
	print 'cant find plasticity model {0}'.format(plasticity_model)


# set the parameters in the tfml file
# choose a mesh
if ( notch == 'square'):
	libspud.set_option("/geometry/mesh::Mesh/source::File/file","compression_mesh")
elif ( notch == 'round'):
	libspud.set_option("/geometry/mesh::Mesh/source::File/file","compression_mesh_rounded")
elif ( notch == 'round_refine'):
	libspud.set_option("/geometry/mesh::Mesh/source::File/file","compression_mesh_rounded_refine")
else:
	print 'cant find mesh for notch style {0}'.format(notch)


# set scalar constants
libspud.set_option("/system::SolidFlow/coefficient::L2h2/type::Constant/rank::Scalar/value::WholeMesh/constant",L2_on_h2)
libspud.set_option("/system::SolidFlow/coefficient::inv_eta0/type::Expression/rank::Scalar/value::Bottom/constant",eta_0/float(eta_1))
libspud.set_option("/system::SolidFlow/coefficient::inv_eta0/type::Expression/rank::Scalar/value::Top/constant",eta_0/float(eta_2))
libspud.set_option("/system::SolidFlow/coefficient::dp_A/type::Expression/rank::Scalar/value::Top/constant",float(A))
libspud.set_option("/system::SolidFlow/coefficient::dp_B/type::Expression/rank::Scalar/value::Top/constant",float(B))
libspud.set_option("/system::SolidFlow/coefficient::alpha/type::Constant/rank::Scalar/value::WholeMesh/constant",float(alpha))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <required_input>
        <filenames name="meshfile">
          <python>
            <string_value lines="20" type="code" language="python">from glob import glob
meshfile = glob('../../mesh/compression_mesh*.xml.gz')</string_value>
          </python>
        </filenames>
      </required_input>
      <variables>
        <variable name="L2ResPicard">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
conv = parser("compression_SolidFlow_Picard_picard.conv")
L2ResPicard = conv["SolidFlow"]["res_norm(l2)"]</string_value>
        </variable>
        <variable name="L2Change">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from numpy import sqrt, abs
stat = parser("compression.stat")
L2Change= sqrt(stat["SolidFlow"]["VelocityL2deltausquared"]["functional_value"])</string_value>
        </variable>
        <variable name="L2u">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from numpy import sqrt
stat = parser("compression.stat")
L2u= sqrt(stat["SolidFlow"]["VelocityL2usquared"]["functional_value"])</string_value>
        </variable>
        <variable name="L2Changev">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from numpy import sqrt, abs
stat = parser("compression.stat")
L2Changev= sqrt(stat["SolidFlow"]["VelocityL2deltavsquared"]["functional_value"])</string_value>
        </variable>
        <variable name="L2v">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from numpy import sqrt, abs
stat = parser("compression.stat")
L2v= sqrt(stat["SolidFlow"]["VelocityL2vsquared"]["functional_value"])</string_value>
        </variable>
        <variable name="L2Changep">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from numpy import sqrt, abs
stat = parser("compression.stat")
L2Changep= sqrt(stat["SolidFlow"]["PressureL2deltapsquared"]["functional_value"])</string_value>
        </variable>
        <variable name="L2p">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
from numpy import sqrt, abs
stat = parser("compression.stat")
L2p= sqrt(stat["SolidFlow"]["PressureL2psquared"]["functional_value"])</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="Convergence">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
# set a display independent backend
matplotlib.use('Agg')
import matplotlib.pyplot as pl

def scitolatex(str):
  '''utility script to convert scientific notation numbers like
    1.e23 to latex formatable numbers 10^23
  ''' 
  split = str.split('.')
  split[0] = split[0]+'\\times' 
  split[1] = split[1].replace('e','10^{')+'}'

  if "1" in split[0]:
    return split[1]
  else: 
    return split[0]+split[1]
  
def maprheology(pm):
  ''' maps title of plasticity model to something that looks better type set
  '''
  if pm == 'von_mises':
    return 'von-Mises'
  elif pm == 'depth_dependent_von_mises':
    return 'depth dependent von-Mises'
  elif pm == 'drucker_prager':
    return 'Drucker Prager'
  else: 
    return pm.replace('_',' ') 

notch =  L2ResPicard.parameters["notch"]
eta_2 =  L2ResPicard.parameters["eta_2"]
model = L2ResPicard.parameters["plasticity_model"]
color = iter(['r', 'g', 'b', 'k', 'y', 'c'])

print model
print notch
print eta_2

eta = [ float(eta_2[i]) for i in range(len(eta_2)) ]


style = notch[0] 
for pm in model: 
	pl.figure()
	color = iter(['r', 'g', 'b', 'k', 'y', 'c'])
	for eta in eta_2: 
		c = next(color)	
		adict = {"plasticity_model":pm,"eta_2":eta,"notch":style}
		L2ResidualP= L2ResPicard[adict][0:-1:2]
		L2durel = (L2Change[adict][2:]/L2u[adict][2:])
		L2dvrel = (L2Changev[adict][2:]/L2v[adict][2:])
		L2dprel = (L2Changep[adict][2:]/L2p[adict][2:])
		itP = np.arange(len(L2ResidualP))
		itdu = np.arange(len(L2durel))
		etal = scitolatex(eta)
		pl.semilogy(itP,L2ResidualP,'-o'+c,label='$\\||F||_2, \\eta={0}$'.format(etal))
		pl.hold(True)
		pl.semilogy(itdu,L2durel,'-s'+c,label='$||\Delta x||_2/||x||_2, \\eta={0}$'.format(etal))
		pl.semilogy(itdu,L2dvrel,'-^'+c,label='$||\Delta v||_2/||v||_2, \\eta={0}$'.format(etal))
		pl.semilogy(itdu,L2dprel,'-d'+c,label='$||\Delta p||_2/||p||_2, \\eta={0}$'.format(etal))
		pl.legend(loc='best')
		pl.xlabel('Iterations')
		pl.ylabel('Error measures')
		pl.title('Convergence: {0}'.format(maprheology(pm)))
		pl.savefig('Convergence_{0}_ss.pdf'.format(pm))</string_value>
      <comment>try to get fancy and make single convergence plot for the composite solver</comment>
    </test>
  </tests>
</harness_options>
