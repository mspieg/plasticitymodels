<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Convergence tests for exploring Newton solvers/preconditioners for drucker prager rheologies using a simple notch test.  This version runs a continuation method on alpha starting with a converged newton solution for depth_dependent_von_mises</string_value>
  </description>
  <simulations>
    <simulation name="dp_test">
      <input_file>
        <string_value lines="1" type="filename">compression.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="eta_1">
          <values>
            <string_value lines="1">2.e24</string_value>
          </values>
        </parameter>
        <parameter name="eta_2">
          <values>
            <string_value lines="1">1.e21</string_value>
          </values>
        </parameter>
        <parameter name="notch">
          <values>
            <string_value lines="1">round_refine</string_value>
            <comment>mesh style for notch,  currently square or round</comment>
          </values>
        </parameter>
        <parameter name="plasticity_model">
          <values>
            <string_value lines="1">drucker_prager</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
from math import pi, cos, sin

# initialize scaling parameters
h = 30000.  # system height in m
eta_0 = 1.e22   # reference viscosity (Pa s)
u0 = 2.5e-3       # compression velocity m/yr
rho = 2700.       # density
g = 9.81		  # gravity
yr_per_s = 1./3600./365.25/24.

edot_0 = u0*yr_per_s/h  # reference strain_rate
tau_0 = 2.*eta_0*edot_0  # reference stress

# dimensionless parameters
L2_on_h2 = eta_0*edot_0/rho/g/h

if (plasticity_model == 'von_mises'):
	C = 1.e8
	A = C/eta_0/edot_0
	B = 0.
	alpha = 0. 
	print 'using von_mises plasticity A={0}, B={1}, alpha={2}'.format(A,B,alpha)
elif (plasticity_model == 'drucker_prager'):
	phi = 30.*pi/180.
	C = 1.e8
	A = C*cos(phi)/eta_0/edot_0
	B = sin(phi)
	alpha = 1.
	print 'using drucker_prager plasticity A={0}, B={1}, alpha={2}'.format(A,B,alpha)
elif (plasticity_model == 'isoviscous'):
	A = 1.e10
	B = 1.e10
	alpha  = 0.
	print 'using iso viscous plasticity model A={0}, B={1}, alpha={2}'.format(A,B,alpha)
elif (plasticity_model == 'depth_dependent_von_mises'):
	phi = 30.*pi/180.
	C = 1.e8
	A = C*cos(phi)/eta_0/edot_0
	B = sin(phi)
	alpha = 0.
	print 'using depth_dependent_von_mises plasticity A={0}, B={1}, alpha={2}'.format(A,B,alpha)
else:
	print 'cant find plasticity model {0}'.format(plasticity_model)

# set the parameters in the tfml file
# choose a mesh
if ( notch == 'square'):
	libspud.set_option("/geometry/mesh::Mesh/source::File/file","compression_mesh")
elif ( notch == 'round'):
	libspud.set_option("/geometry/mesh::Mesh/source::File/file","compression_mesh_rounded")
elif ( notch == 'round_refine'):
	libspud.set_option("/geometry/mesh::Mesh/source::File/file","compression_mesh_rounded_refine")



# set scalar constants
libspud.set_option("/system::SolidFlow/coefficient::L2h2/type::Constant/rank::Scalar/value::WholeMesh/constant",L2_on_h2)
libspud.set_option("/system::SolidFlow/coefficient::inv_eta0/type::Expression/rank::Scalar/value::Bottom/constant",eta_0/float(eta_2))
libspud.set_option("/system::SolidFlow/coefficient::inv_eta0/type::Expression/rank::Scalar/value::Top/constant",eta_0/float(eta_1))
libspud.set_option("/system::SolidFlow/coefficient::dp_A/type::Expression/rank::Scalar/value::Top/constant",float(A))
libspud.set_option("/system::SolidFlow/coefficient::dp_B/type::Expression/rank::Scalar/value::Top/constant",float(B))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <required_input>
        <filenames name="meshfile">
          <python>
            <string_value lines="20" type="code" language="python">from glob import glob
meshfile = glob('../../mesh/compression_mesh*.xml.gz')</string_value>
          </python>
        </filenames>
      </required_input>
      <variables>
        <variable name="L2ResNewton0">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
conv = parser("compression_SolidFlow_Solver0_snes.conv")
L2ResNewton0= conv["SolidFlow"]["res_norm(l2)"]</string_value>
        </variable>
        <variable name="L2ResNewton">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
conv = parser("compression_SolidFlow_Solver_snes.conv")
L2ResNewton= conv["SolidFlow"]["res_norm(l2)"]</string_value>
        </variable>
        <variable name="pMax">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("compression.stat")
pMax = stat["SolidFlow"]["Pressure"]["max"][-1]</string_value>
        </variable>
        <variable name="pMin">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("compression.stat")
pMin = stat["SolidFlow"]["Pressure"]["min"][-1]</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="Convergence">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
# set a display independent backend
matplotlib.use('Agg')
matplotlib.rc('text', usetex=True)
matplotlib.rcParams['text.latex.preamble']=[r"\usepackage{amsmath}"]
import matplotlib.pyplot as pl

def scitolatex(str):
  '''utility script to convert scientific notation numbers like
    1.e23 to latex formatable numbers 10^23
  ''' 
  split = str.split('.')
  split[0] = split[0]+'\\times' 
  split[1] = split[1].replace('e','10^{')+'}'

  return split[0]+split[1]
  
def maprheology(pm):
  ''' maps title of plasticity model to something that looks better type set
  '''
  if pm == 'von_mises':
    return 'von-Mises'
  elif pm == 'depth_dependent_von_mises':
    return 'depth dependent von-Mises'
  elif pm == 'drucker_prager':
    return 'Drucker Prager'
  else: 
    return pm.replace('_',' ') 
    
notch =  L2ResNewton.parameters["notch"]
eta_1 =  L2ResNewton.parameters["eta_1"]
model = L2ResNewton.parameters["plasticity_model"]
color = iter(['r', 'g', 'b', 'k', 'y', 'c'])

print model
print notch
print eta_1

eta = [ float(eta_1[i]) for i in range(len(eta_1)) ]


pm = 'drucker_prager'
style = notch[0]
for eta in eta_1:
  pl.figure()
  color = iter(['r', 'g', 'b', 'k', 'y', 'c'])
  c = next(color)	
  adict = {"plasticity_model":pm,"eta_1":eta,"notch":style}
  L2N0= L2ResNewton0[adict]
  L2N= L2ResNewton[adict][:-30] # lop off the last 29 points
  L2ResidualN = np.concatenate((L2N0,L2N))
  itN = np.arange(len(L2ResidualN))
  pl.semilogy(itN,L2ResidualN,'-s'+c,label='$\\eta_1={0}$ Pa s'.format(scitolatex(eta)))

  ticks = 10**np.linspace(-12,0,7)
  pl.gca().set_yticks(ticks)
  pl.tick_params(axis='both', which='major', labelsize=20)
  pl.legend(loc='best',fontsize=16)
  pl.xlabel('Iterations',fontsize=20)
  pl.ylabel('$||\\boldsymbol{F}||_2$',fontsize=18)
  pl.title('Drucker Prager with $\\alpha$-Continuation',fontsize=20)
  pl.savefig('Convergence_{0}_eta{1}.pdf'.format(pm,eta))</string_value>
      <comment>try to get fancy and make single convergence plot for the composite solver</comment>
    </test>
  </tests>
</harness_options>
